1 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ СИСТЕМИ


IoT-пристрій розробленої системи після запуску видає посилання для підключення, яке необхідно вставити у мобільному додатку або на вебсайті в налаштуваннях відповідного обладнання. Після цього, за допомогою мобільного додатку або вебсайту можна надсилати запити на ІоТ пристрій.

Сам ІоТ пристрій працює в двох потоках:
-	Перший потік моніторить стан пивоваріння та, якщо пивоваріння запущене, проводить його процес.
-	Другий потік приймає запити від сервера і, відповідно до них, менеджить перший потік з процесом варіння або просто повертає певні дані (наприклад, стан обладнання на даний момент).

Взаємодія пристрою з сервером представлена на діаграмі прецедентів (див. рис. 1).


2 ОПИС РОЗРОБКИ ЗАСТОСУНКУ ДЛЯ ВБУДОВАНИХ СИСТЕМ 


При розробці системи було прийнято рішення використовувати архітектурну модель, яка поєднує принципи монолітної та модульної архітектур, щоб досягти балансу між простотою та розширюваністю. Це дозволяє їй ефективно працювати, навіть при невеликому збільшенні її складності, а також легко розширюватися за рахунок підтримки нових пристроїв без значних змін у внутрішньому коді.
Важливим аспектом є мінімізація використання постійної пам'яті для забезпечення високої продуктивності системи та зниження вимог до пристрою, на якому буде виконано систему. 
Результатом цих архітектурних рішень стала UML діаграма діяльності, яка ілюструє структуру та взаємодію різних компонентів системи (див. додаток A.2).


3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ


3.1 Опис використаних технологій

Під час розробки вбудованої частини системи було використано інструменти мови програмування C#. Також, для реалізації деяких аспектів системи використовувалися зовнішні технології, що підтримують мову програмування C#.
Для зчитування та безпечного збереження конфігураційних файлів було використано бібліотеку Newtonsoft.Json, яка надає зручні інструменти для роботи з форматом JSON.
Для демонстрації структури використання пакетів усередині системи ми створили UML-діаграму пакетів (див. додаток A.3). Ця діаграма ілюструє взаємозв'язки та інтерфейси між різними компонентами нашого програмного забезпечення, що сприяє зрозумінню його структури та організації.


3.2 Опис результатів розробки частини проекту для вбудованих систем

Результатом роботи став застосунок для вбудованих систем, що може бути запущений на широкому спектрі пристроїв.
Під час запуску додатку, спершу відбувається його ініціалізація та підготовка. Для визначення першочергових параметрів системи, користувачу надається url пристрою, який він потім повинен вказати в налаштуваннях обладнання на сайті або на мобільному додатку. У конфігурації визначається кінцева точка входу серверної частини системи, модель контролера.
Система типів застосунку повністю повторює систему типів серверної частини і не зазнала змін.
Після успішної ініціалізації та підготовки об’єктів необхідних структур, система запускає два окремих потоки, один з яких буде відповідати за реагування на запити, що надходять з серверної частини, а інший — за контроль стану пивоваріння в обладнанні. 
Під час виконання потоку взаємодії з серверною частиною системи, програма отримує від серверної частини запити на вказані ендпоінти. Відповідно до вказаного ендпоінту програма змінює поточний стан пивоваріння, створюючи новий процес, зупиняючи існуючий або отримуючи актуальну інформацію про останнє пивоваріння чи загальний стан обладнання.
Під час виконання потоку взаємодії з пристроями, програма спостерігає за станом поточного процесу пивоваріння, і, якщо його запущено, періодично оновлює його, додаючи нові логи (про заповнення обладнання, про сам процес пивоваріння). 
Для демонстрації складної структури проекту була розроблена UML діаграма взаємодії (див. додаток А.1).


4 ОПИС РЕЗУЛЬТАТІВ ТЕСТУВАННЯ ЧАСТИНИ ПРОЕКТУ ДЛЯ ВБУДОВАНИХ СИСТЕМ


Зазначений віртуальний пристрій, з точки зору структури, є найпростішим RESTful API з такою специфікацією: GET /abort зупиняє поточний процес пивоваріння, GET /brewingstatus повертає статус поточного пивоваріння, GET /status повертає статус обладнання, POST /startbrewing починає процес варіння обраного рецепта, GET /history-count повертає поточну кількість виконаних пивоварінь на пристрої з моменту його останнього ввімкнення, GET /is-reachable використовується серверною частиною для первірки доступності пристрою за вказаним у налаштуваннях обладнання посиланням.
Для перевірки правильності роботи системи було проведено тестування. Тестування виконувалося вручну, за допомогою спеціального програмного забезпечення, а також з використання програмних підходів. У ході тестування було використано функціональність Visual Studio 2022, cпеціального програмного забезпечення Swagger, а також вбудовані можливості мови програмування C#. 
Для демонстрації принципу роботи контролера з кінцевим пристроєм, був розроблений віртуальний «пристрій», що симулює поведінку обладнання для пивоваріння із вбудованою функціональністю запуску та переривання поточного процесу пивоваріння, отримання актуальної інформації про стан пивоваріння та загальний стан обладнання.


ВИСНОВКИ


Результатом виконаної лабораторної роботи є розробка програмного забезпечення для вбудованих систем.
Пристрій входить у склад програмної системи та взаємодіє з нею. Реалізоване програмне забезпечення розширює функціональність, що відповідає концепції вбудованих систем, і забезпечує ефективну взаємодію з іншими компонентами системи.
