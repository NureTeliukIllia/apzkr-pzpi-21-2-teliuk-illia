1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ


Користувачами розробленої системи є 2 типи акторів: клієнт та адміністратор. 
Основними потребами клієнта є: 
-	можливість перегляду доступного обладнання, доступних інгредієнтів та рецептів, перегляд списку власного обладнання, створених рецептів, наявних у власності інгредієнтів;
-	можливість додавання обладнання та інгредієнтів до свого інвентаря, створення, редагування та видалення власних рецептів та оцінення рецептів інших користувачів;
-	можливість підключення до придбаного обладнання, отримання актуального статусу обраного обладнання, запуск процесу приготування обраного рецепту на обладнанні.

Основними потребами адміністратора є: 
-	можливість перегляду, створення, редагування, видалення доступного обладнання та доступних інгредієнтів;
-	можливість створення резервних копій даних системи та їхній імпорт в систему.

Діаграма прецедентів (див. додаток А.1) детально описує взаємодію кожної ролі користувача з системою. Цей інструмент дозволив чітко визначити функціональні потреби та особливості взаємодії різних типів користувачів із системою.


2 ПРОЄКТУВАННЯ БАЗИ ДАНИХ


Для проєктування бази даних було розроблено ER-модель даних (див. додат. А.2). Вона складається з 7 таблиць: пивовари, обладнання, інгредієнти, процеси пивоваріння, логи процесів пивоваріння, рецепти, оцінки рецептів.
У базі даних наявні наступні зв’язки між сутностями:
-	пивовари та інгредієнти мають зв’язок багато до багатьох, тому було створено проміжну таблицю, адже пивовар може мати багато інгредієнтів в інвентарі, як і один інгредієнт може знаходитися в інвентарі багатьох пивоварів;
-	пивовари та обладнання мають зв’язок багато до багатьох, тому було створено проміжну таблицю, адже пивовар може мати багато екземплярів обладнання в інвентарі, як і одне обладнання може знаходитися в інвентарі багатьох пивоварів;
-	обладнання та процеси пивоваріння мають зв’язок один до багатьох, бо на одному обладнанні може виконуватися багато процесів пивоваріння;
-	процеси пивоваріння та логи мають зв’язок один до багатьох, бо один процес пивоваріння може мати в собі багато логів;
-	рецепти та інгредієнти мають зв’язок багато до багатьох, тому було створено проміжну таблицю, адже рецепт може складатися з багатьох інгредієнтів, як і один інгредієнт може бути вказаний у багатьох рецептах;
-	пивовари та рецепти мають зв’язок один до багатьох, бо один пивовар може публікувати багато рецептів;
-	рецепти та оцінки рецептів мають зв’язок один до багатьох, бо рецепт може мати декілька оцінок;
-	рецепти та процеси пивоваріння мають зв’язок один до багатьох, бо один рецепт може використовуватися у багатьох процесах пивоваріння;
-	пивовари та оцінки рецептів мають зв’язок один до багатьох, бо пивовар може залишати багато оцінок під різними рецептами;


3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ


Для розробки серверної частини системи було обрано мову програмування C# та використано технологію ASP.NET Core Web API. За систему управління базами даних обрано PostgreSQL, до якого з серверного застосунка здійснюється доступ за допомогою технології Entity Framework Core, яка надає зручний інтерфейс для взаємодії з базами даних у вигляді об’єктів сутностей.
Для більш детальної візуалізації використаних технологій було розроблено діаграму розгортання (див. рис. 2).
Для тестування та документування API використовується OpenApi (Swagger), що полегшує розробку та підвищує якість API. Використання захищеного протоколу HTTPS забезпечує безпеку даних під час їх передачі.
Для автоматизації мапування між об'єктами використовується бібліотека AutoMapper, що зменшує кількість дубльованого коду та спрощує розробку серверної частини.
Для реалізації автентифікації та авторизації використовується бібліотека .NET Identity, що забезпечує гнучкий та потужний механізм для керування доступом користувачів.
Розроблений серверний застосунок, побудований за концепціями Clean Architecture, складається із кількох шарів: Presentation, Application, Domain та Infrastructure. Кожен вищий рівень є залежним від попереднього.
Архітектура серверного застосунку може бути визначена за допомогою діаграми пакетів (див. додаток Б.1). В додатку В наведено приклади коду серверного застосунку.


4 СПЕЦИФІКАЦІЯ REST


REST API в розробленому проєкті складається з 34 кінцевих точ. Кожна кінцева точка відповідає за надання даних клієнту та виконання бізнес-логіки в межах застосунку.
Специфікація кожної кінцевої точки REST API проєкту наведена у таблиці 1.


ВИСНОВКИ


Під час виконання лабораторної роботи було отримано навички у проєктуванні серверної частини програмної системи, розробці сценаріїв використання, створенні діаграм розгортання та пакетів, а також у проєктуванні бази даних. Було виконано програмну реалізацію серверної частини програмної системи «Heisenbrew» мовою програмування C# з дотриманням вимог до чистого коду.
