1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ


В розробленій програмній системі можна виділити два типи акторів: адміністратора та пивовара.
До потреб пивовара відносяться: можливість перегляду та редагування інформації про власний профіль; можливість перегляду доступного обладнання для пивоваріння, інгредієнтів та рецептів; можливість запуску процесу пивоваріння обраного рецепта на обраному обладнанні; можливість отримання актуальної інформації про стан обладнання; можливість отримання актуальної інформації про стан пивоваріння на обладнанні;  можливість отримання інформації про власні пивоваріння; можливість додавання до свого інвентаря інгредієнтів та обладнання; можливість створення, редагування та видалення власних рецептів; можливість скасування пивоваріння; можливість оновлення додаткових послуг для поїздки.
Основними потребами адміністратора є: можливість створення, редагування, видалення рецептів, обладнання, інгредієнтів; можливість створення резервних копій даних системи та їхній імпорт в систему.
Діаграма прецедентів (див. додаток А.1) детально описує взаємодію кожної ролі користувача з системою.  


2 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ


Для створення клієнської частини програмної системи було обрано мову програмування TypeScript у поєднанні з React для забезпечення швидкості розробки та зручності використання завдяки статичній типізації та компонентному підходу. 
SCSS використовувався для стилізації елементів інтерфейсу, спрощуючи процес написання стилів. 
Для розробки інтерфейсу використано Material UI, що містить готові та стилізовані компоненти, що дозволяє швидко створювати привабливий веб-інтерфейс. 
Для навігації по сайту використано react-router-dom, що надає потужні засоби для створення реактивної навігації. 
Для виконання асинхронних запитів використано axios, який дозволяє зручно взаємодіяти з HTTP-запитами та обробляти відповіді сервера. 
Щодо локалізації, використано бібліотеку i18next для ефективного впровадження багатомовного інтерфейсу та зручного перекладу текстів.
Для розгортання веб-додатку використано Webpack, що забезпечує ефективний спосіб розгортання та автоматичне оновлення в реальному часі. Для візуалізації використаних пакетів було розроблено діаграму пакетів.

Клієнтська частина проєкту організована згідно з принципом Feature-Sliced, що передбачає розділення застосунку на різні шари - каталоги верхнього рівня. У проєкті визначено 7 шарів: assets, components, config, pages, services, types, app.
Шар assets: Тут містяться ресурси проєкту, такі як зображення, шрифти та інші важливі файли для візуального оформлення, включно із файлами локалізації.
Шар components: Цей шар містить компоненти інтерфейсу, які можуть бути перевикористані в різних частинах проєкту. Він поділений на підкаталоги, такі як Button та layout з різними компонентами, наприклад, Header, MainTables, Modals та OwnTables.
Шар config: В цьому шарі знаходяться файли конфігурації. Наприклад, налаштування локалізації.
Шар pages: Тут знаходяться сторінки веб-сайту, які поділені на підкаталоги за їхньою функціональністю. Наприклад, каталог Auth містить сторінки для автентифікації, такі як Login та Register, тоді як сторінка Home відповідає за домашню сторінку.
Шар services: Цей шар містить файли, які відповідають за взаємодію з сервером. Наприклад, каталог api містить модулі для виконання HTTP-запитів, а authApi - модулі для автентифікації користувача.
Шар types: Тут розміщені файли, що визначають типи даних та інтерфейси, які використовуються в проєкті. Наприклад, каталог interfaces містить описи моделей даних, а types - додаткові типи для використання в коді.
Шар app: Цей шар визначає основну конфігурацію застосунку, включаючи вихідну точку додатку та його головний компонент App.js.

Для кращого уявлення архітектури системи було створено діаграму компонентів, що дозволяє детально проаналізувати її структуру та взаємозв'язки між компонентами (див. додат. А.2).

Використання програмної системи починається з авторизації – або створення нового акаунту, або входу в уже створений. При цьому, створити акаунт адміністратора неможливо.
В залежності від вказаної в базі даних ролі, користувач отримує доступ до функціоналу адміністратора або пивовара.
Як пивовар, так і адміністратор бачать на головній сторінці таблицю із даними обраного типу (рецепти, обладнання та інгредієнти) та кнопками перемикання обраного типу. Адміністратор додатково має функціонал для додавання нових даних до бази даних та експорту даних програмної системи.
З головної сторінки користувач може перейти до власного профілю та змінити інформацію про себе, встановивши нові прізвище та ім’я. Також на цій сторінці відображається інвентар користувача із його обладнанням, інгредієнтами у власності та створеними рецептами. Звідси користувач може перейти до менедменту процесів пивоваріння або змінювати інформацію про свої рецепти, додаючи нові або оновлюючи та видаляючи вже створені.
При переході на сторінку менеджменту процесів пивоваріння, користувач може отримувати інформацію про поточну доступність системи, стан обладнання, поточний стан процесу пивоваріння та історію пивоварінь. Тут користувач також може запустити новий процес пивоваріння або припинити поточний. 
Загалом адміністратор має доступ до того ж функціоналу, що й звичайний пивовар, окрім доступу до редагування інформації про обладнання та інгредієнти в системі, можливість редагування або видалення чужих рецептів та експорт даних.
Для кращого уявлення про взаємодію користувачів з клієнтською частиною системи було розроблено діаграму взаємодії (див. додаток А.3).
Це дозволило визначити основні технології та архітектуру системи через діаграми пакетів, компонентів та їх взаємодію. 
У додатку Б наведено приклади коду клієнтської частини системи.


ВИСНОВКИ


Під час виконання практичного завдання було отримано досвід у проєктуванні клієнтської частини програмної системи. Результатом роботи є програмна реалізація фронтенду, розроблена з використанням React. Під час розробки було дотримано принципи чистого коду мови програмування Typescript.
